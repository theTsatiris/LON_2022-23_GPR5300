struct Material
{
    vec3 colour;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Sphere
{
    vec3 centre;
    float radius;
};

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    bool useBlinn = true;

    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    float aspectRatio = iResolution.x/iResolution.y;
    uv.x *= aspectRatio;
    
    Sphere sph;
    sph.centre = vec3(0.5 , 0.5, 5.0);
    sph.centre.x *= aspectRatio;
    sph.radius = 0.3;

    //Surface material
    Material sphereMat;
    
    sphereMat.colour = vec3(1.0, 1.0, 1.0);
    //if colour is already encoded in the ambient, diffuse and specular coefficients,
    //the colour coefficient should be neutralised (all 1s)
    
    sphereMat.ambient = vec3(0.0215, 0.1745, 0.0215);
    sphereMat.diffuse = vec3(0.07568, 0.61424, 0.07568);
    sphereMat.specular = vec3(0.633, 0.727811, 0.633);
    sphereMat.shininess = 0.6 * 128.0;
    
    //Materials can be found here:
    //http://devernay.free.fr/cours/opengl/materials.html
    
    //Light properties
    vec3 lightColour = vec3(1.0, 1.0, 1.0);
    vec3 lightPosition = vec3(5.0 * cos(iTime), 5.0 * sin(iTime), -1.0);
    
    //Camera position
    vec3 cameraPosition = vec3(0.5, 0.5, 0.0);
    
    vec3 col = vec3(0.0);
    
    if(length(uv - sph.centre.xy) <= sph.radius)
    {
        vec3 uv_3D; //PSEUDO 3D version of our original pixel
        float pseudo_z = sph.centre.z - sqrt(pow(sph.radius, 2.0) - pow(uv.y - sph.centre.y, 2.0));
        uv_3D = vec3(uv, pseudo_z);
        
        //Surface normal
        vec3 normal = normalize(uv_3D - sph.centre);
        
        //PHONG ALGORITHM

        vec3 ambientComponent = vec3(0.0);
        vec3 diffuseComponent = vec3(0.0);
        vec3 specularComponent = vec3(0.0);

        //Ambient component
        ambientComponent = sphereMat.colour * sphereMat.ambient * lightColour;

        //Diffuse component
        vec3 lightDirection = normalize(lightPosition - uv_3D); 
        //float diff = dot(normal, lightDirection);
        float diff = max(dot(normal, lightDirection), 0.0);
        diffuseComponent = sphereMat.colour * sphereMat.diffuse * lightColour * diff;
        
        //Specular component
        vec3 viewDirection = normalize(cameraPosition - uv_3D);
        float spec = 0.0;
        
        if(useBlinn)
        {
            vec3 halfway = normalize(lightDirection + viewDirection);
            spec = pow(max(dot(normal, halfway), 0.0), sphereMat.shininess);
        }
        else
        {
            vec3 reflDirection = reflect(-lightDirection, normal);
            //spec = pow(dot(viewDirection, reflDirection), sphereMat.shininess);
            spec = pow(max(dot(viewDirection, reflDirection), 0.0), sphereMat.shininess);
        }
        
        specularComponent = sphereMat.colour * sphereMat.specular * lightColour * spec;
        
        col = ambientComponent + diffuseComponent + specularComponent;
    }
    
    // Output to screen
    fragColor = vec4(col,1.0);
}