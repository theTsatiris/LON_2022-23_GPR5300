struct Triangle
{
    vec2 A;
    vec2 B;
    vec2 C;
};

float signum(vec2 a, vec2 point, vec2 b)
{
    vec2 ap = point - a;
    vec2 ab = b - a;
    
    //extend the above 2D vectors to the 3rd dimension
    vec3 ap_3D = vec3(ap.x, ap.y, 0.0);
    vec3 ab_3D = vec3(ab.x, ab.y, 0.0);
    
    //calculate cross product
    vec3 crossProd = cross(ap_3D, ab_3D);
    
    return sign(crossProd.z);
}

bool isInTriangle(vec2 point, Triangle tr)
{
    float dir1 = signum(tr.A, point, tr.B);
    float dir2 = signum(tr.B, point, tr.C);
    float dir3 = signum(tr.C, point, tr.A);
    
    //dir1 == dir2 == dir3 means all cross prods
    //directions are the same
    return (dir1 == dir2) && (dir2 == dir3);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    vec2 displacement = vec2(0.2 * cos(iTime), 0.2 * sin(iTime));
    
    Triangle tr;
    tr.A = vec2(0.5, 0.8) + displacement;
    tr.B = vec2(0.2, 0.2) + displacement;
    tr.C = vec2(0.8, 0.2) + displacement;
    
    vec3 col = vec3(0.0);
    
    if(isInTriangle(uv, tr))
    {
        // Time varying pixel color
        col = 0.5 + 0.5*cos(iTime + uv.xyx + vec3(0,2,4));
    }

    // Output to screen
    fragColor = vec4(col,1.0);
}